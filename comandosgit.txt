git config --list trae la informacion del projecto, de quien es el email del que esta haciendo los commits.
 git config --list --show-origin trae la informacion de donde esta guardado los archivos git en tu computadora.
git config trae toda la lista de de acciones de configuracion
$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com

git add archivo.txt agrega los archivos al area de staging o de espera
git add . agrega todos los archivos que estan en el area de staging . significa toda la carpeta
git commit agrega los archivos a la rama principal
git commit -m "mensaje random" agrega los archivos a la rama principal con un mensaje
git commit -am "mensaje random" agrega los archivos al stagign y los comitea al mismo tiempo (solo funciona con archivos previamente agregados con dd)
git branch te permite ver los nombres de las ramas existentes
git branch nombre_rama crea una copia del ultimo commit y con esa copia crea una rama.
git merge te permite unir dos ramas (hay que colocarle un mensaje por que es un commmit)

git log archivo.txt te permite ver el historial de cambios de un archivo en particular	
git show archivo.txt te permite ver una comparacion del ultimo commit con el penultimo commit
git diff commitnumber1 commitnumber2 comparamos las versiones , te muestra los cambios
git reset commitnumber --hard regresa el archivo al estado del numero de commit que elegimos
git reset commitnumber --soft regresa el archivo al estado del commit que elegimos, pero mantiene lo que dejamos en stagging.
git checkout commitnumber te regresa a una version anterior
git checkout master te regresa a la version master
git checkout nombre_rama te coloca en la rama que elijas
git log --stat te permite ver los cambios con bits

git remote add origin direccion_url agrega una carpeta remota ya sea github u otro controlador de versiones
git remote te muestra el origin
git remote -v te muestra la direccion url para hcer el fetch y push
git push origin master pusheas los cambios al origin la rama master
git pull origin master --alow-unrelated-histories este es el primer commit que se hace al github para que te permita traer el archivo readme o los cambios que ya existan a tu computadora; es un tipo de merge.
hola 




git log --stat te permite ver los cambios con bits
git log --oneline - Te muestra el id commit y el título del commit.
git log --decorate- Te muestra donde se encuentra el head point en el log.
git log --stat - Explica el número de líneas que se cambiaron brevemente.
git log -p- Explica el número de líneas que se cambiaron y te muestra que se cambió en el contenido.

git shortlog - Indica que commits ha realizado un usuario, mostrando el usuario y el titulo de sus commits.
git log --graph --oneline --decorate y
git log --pretty=format:"%cn hizo un commit %h el dia %cd" - Muestra mensajes personalizados de los commits.
git log -3 - Limitamos el número de commits.
git log --after=“2018-1-2” ,
git log --after=“today” y
git log --after=“2018-1-2” --before=“today” - Commits para localizar por fechas.
git log --author=“Name Author” - Commits realizados por autor que cumplan exactamente con el nombre.
git log --grep=“INVIE” - Busca los commits que cumplan tal cual está escrito entre las comillas.
git log --grep=“INVIE” –i- Busca los commits que cumplan sin importar mayúsculas o minúsculas.
git log – index.html- Busca los commits en un archivo en específico.
git log -S “Por contenido”- Buscar los commits con el contenido dentro del archivo.
git log > log.txt - guardar los logs en un archivo txt

para salir de editor de textos nano se presion
ctrl + o
enter
ctrl + x
para salir del editor de textos vim
esc
:wq
enter
*****************
:w = escribir o guardar
:q = guardar o salir
: + wq para guardar y salir
: + w solo para guardar
: + q salir pero no guardar
: + q! forzar para salir
para salir de vim en windows 
presionar
esc + shift + zz

